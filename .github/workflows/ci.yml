name: CI

on:
  push:
    branches:
      - master
  pull_request: ~
  workflow_dispatch: ~

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_ENTRYPOINT: https://localhost
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Pull images
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --build -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://localhost
      - name: Migrate
        run: docker-compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      - name: Install PHPUnit
        run: docker-compose exec -T php composer require -n symfony/test-pack symfony/http-client justinrainbow/json-schema
      # - name: ls
      #   run: docker-compose exec -T php ls -al
      - name: pwd
        run: docker-compose exec -T php pwd
      - name: PHPUnit
        run: docker-compose exec -T php vendor/bin/phpunit /srv/api/tests
      - name: Doctrine Schema Validator
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml exec -T php bin/console doctrine:schema:validate --skip-sync
      - name: Jest
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml exec -T pwa yarn test --ci --passWithNoTests
      - uses: actions/checkout@v2
        name: checkout
      # - uses: repo-sync/pull-request@v2
      #   name: pull-request
      #   with:
      #     destination_branch: "master"
      #     pr_title: "Pulling ${{ github.ref }} into master"
      #     pr_body: "automated PR"
      #     pr_reviewer: "test"
      #     pr_draft: true
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: deploy on vercel
      #   uses: amondnet/vercel-action@v20
      #   with:
      #     vercel-token: PMjx75QKo6DNyEEOdIoxgqkc
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     vercel-args: '--confirm'
      #     vercel-org-id: ${{ secrets.ORG_ID}}
      #     vercel-project-id: ${{ secrets.PROJECT_ID}}
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
        - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}